name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s")
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: SAI CLI ${{ steps.get_version.outputs.version }}
        body: |
          ## Changes in ${{ steps.get_version.outputs.version }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          
          ### Quick Install (Unix/Linux/macOS)
          ```bash
          curl -fsSL https://raw.githubusercontent.com/example42/sai/main/scripts/install.sh | bash
          ```
          
          ### Quick Install (Windows PowerShell)
          ```powershell
          iwr -useb https://raw.githubusercontent.com/example42/sai/main/scripts/install.ps1 | iex
          ```
          
          ### Manual Installation
          1. Download the appropriate binary for your platform from the assets below
          2. Extract the archive
          3. Move the binary to a directory in your PATH
          
          ## Checksums
          
          SHA256 checksums are provided in the `checksums.txt` file.
        draft: false
        prerelease: false

  build-and-upload:
    name: Build and Upload
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build release binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
        VERSION: ${{ needs.create-release.outputs.version }}
      run: |
        BINARY_NAME=sai
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        LDFLAGS="-s -w -X main.version=${VERSION} -X main.buildTime=$(date -u '+%Y-%m-%d_%H:%M:%S') -X main.commit=$(git rev-parse --short HEAD)"
        
        go build -ldflags "${LDFLAGS}" -o ${BINARY_NAME} ./cmd/sai
        
        # Create package
        PACKAGE_NAME=sai-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}
        mkdir ${PACKAGE_NAME}
        cp ${BINARY_NAME} ${PACKAGE_NAME}/
        cp README.md ${PACKAGE_NAME}/
        [ -f LICENSE ] && cp LICENSE ${PACKAGE_NAME}/
        
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip -r ${PACKAGE_NAME}.zip ${PACKAGE_NAME}/
          ASSET_PATH=${PACKAGE_NAME}.zip
        else
          tar -czf ${PACKAGE_NAME}.tar.gz ${PACKAGE_NAME}/
          ASSET_PATH=${PACKAGE_NAME}.tar.gz
        fi
        
        echo "ASSET_PATH=${ASSET_PATH}" >> $GITHUB_ENV
        echo "ASSET_NAME=${ASSET_PATH}" >> $GITHUB_ENV

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ env.ASSET_PATH }}
        asset_name: ${{ env.ASSET_NAME }}
        asset_content_type: application/octet-stream

  generate-checksums:
    name: Generate Checksums
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all release assets
      uses: robinraju/release-downloader@v1.8
      with:
        tag: ${{ needs.create-release.outputs.version }}
        fileName: "*.tar.gz"
        out-file-path: "downloads"

    - name: Download all release assets (Windows)
      uses: robinraju/release-downloader@v1.8
      with:
        tag: ${{ needs.create-release.outputs.version }}
        fileName: "*.zip"
        out-file-path: "downloads"

    - name: Generate checksums
      run: |
        cd downloads
        sha256sum * > checksums.txt
        cat checksums.txt

    - name: Upload checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./downloads/checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain

  update-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [create-release, generate-checksums]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Update Homebrew formula
      uses: mislav/bump-homebrew-formula-action@v2
      with:
        formula-name: sai
        homebrew-tap: example42/homebrew-tap
        base-branch: main
        download-url: https://github.com/example42/sai/releases/download/${{ needs.create-release.outputs.version }}/sai-${{ needs.create-release.outputs.version }}-darwin-amd64.tar.gz
        commit-message: |
          Update sai to ${{ needs.create-release.outputs.version }}
          
          Created by GitHub Actions
      env:
        COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload, generate-checksums]
    if: always()
    steps:
    - name: Notify success
      if: needs.build-and-upload.result == 'success' && needs.generate-checksums.result == 'success'
      run: |
        echo "‚úÖ Release ${{ needs.create-release.outputs.version }} completed successfully!"
        echo "üì¶ All platform binaries built and uploaded"
        echo "üîê Checksums generated and uploaded"
        echo "üöÄ Release is ready for distribution"

    - name: Notify failure
      if: needs.build-and-upload.result == 'failure' || needs.generate-checksums.result == 'failure'
      run: |
        echo "‚ùå Release ${{ needs.create-release.outputs.version }} failed!"
        echo "Please check the workflow logs for details"
        exit 1